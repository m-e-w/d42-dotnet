using D42_POC_Demo.Classes;
using D42_POC_Demo.Classes.D42_Objects;
using Microsoft.VisualBasic;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;

namespace D42_POC_Demo
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private D42_Helper d42_Helper;
        private Window configWindow;
        private CollectionView doqlCollectionView;
        private CollectionView dataDictCollectionView;

        public MainWindow()
        {
            InitializeComponent();
            d42_Helper = new D42_Helper();

            doqlListBox.ItemsSource = (from kvp in d42_Helper.DOQL_QUERIES select kvp.Key).Distinct().ToList();
            doqlListBox.SelectedIndex = 0;
            doqlListBox.SelectionChanged += ElementSelectionChanged;
            doqlListBox.MouseDoubleClick += DoqlListBox_MouseDoubleClick;

            doqlSearchbox.GotFocus += ElementGotFocus;
            doqlSearchbox.LostFocus += ElementLostFocus;
            doqlSearchbox.TextChanged += ElementTextChanged;

            doqlCollectionView = CollectionViewSource.GetDefaultView(doqlListBox.ItemsSource) as CollectionView;
            doqlCollectionView.Filter = doqlViewFilter;

            dataDictionaryListBox.ItemsSource = (from kvp in d42_Helper.DataDictionary select kvp.Key).Distinct().ToList();
            dataDictionaryListBox.SelectedIndex = 0;
            dataDictionaryListBox.SelectionChanged += ElementSelectionChanged;

            dataDictSearchBox.GotFocus += ElementGotFocus;
            dataDictSearchBox.LostFocus += ElementLostFocus;
            dataDictSearchBox.TextChanged += ElementTextChanged;

            dataDictCollectionView = CollectionViewSource.GetDefaultView(dataDictionaryListBox.ItemsSource) as CollectionView;
            dataDictCollectionView.Filter = dataDictViewFilter;
            dataDictGrid.AutoGeneratedColumns += DataGrid_AutoGeneratedColumns;

            configMenuItem.Click += MenuItem_Click;
            exitMenuItem.Click += MenuItem_Click;
            runDoqlQueryMenuItem.Click += MenuItem_Click;
            createDoqlQueryMenuItem.Click += MenuItem_Click;
            saveDOQLQueryMenuItem.Click+= MenuItem_Click;
            updateDOQLLibraryMenuItem.Click += MenuItem_Click;
            exportDoqlResultsAsCSVMenuItem.Click += MenuItem_Click;
            VMwareDiscoveryJobMenuItem.Click += VMwareDiscoveryJobMenuItem_Click;

            LoadDataDictGrid();
        }
        //<Event Handlers>
        private async void VMwareDiscoveryJobMenuItem_Click(object sender, RoutedEventArgs e)
        {
            VMwareJob job = new VMwareJob();
            DynamicFormWindow formWin = new DynamicFormWindow(job, "Create / Update - VMware Discovery Job");
            Dictionary<string, int> ui_Order = new Dictionary<string, int>
            {
                {nameof(job.name), 0},
                {nameof(job.server), 1 },
                {nameof(job.url_prefix), 2 },
                {nameof(job.port), 3 }
            };
            formWin.CreateControls<VMwareJob>(ui_Order);
            formWin.ShowDialog();
            if(formWin.Saved)
            {
                await d42_Helper.CreateDiscoveryJob(formWin.GetSavedObject());
                statusLabel.Text = d42_Helper.Status;
            }
        }
        private void ElementLostFocus(object sender, RoutedEventArgs e)
        {
            if (sender == dataDictSearchBox)
            {
                if (dataDictSearchBox.Text == "")
                {
                    dataDictSearchBox.Text = "Search";
                }
            }
            if (sender == doqlSearchbox)
            {
                if (doqlSearchbox.Text == "")
                {
                    doqlSearchbox.Text = "Search";
                }
            }
        }
        private void ElementGotFocus(object sender, RoutedEventArgs e)
        {
            if(sender == dataDictSearchBox)
            {
                if (dataDictSearchBox.Text == "Search")
                {
                    dataDictSearchBox.Text = "";
                }
            }
            if(sender == doqlSearchbox)
            {
                if (doqlSearchbox.Text == "Search")
                {
                    doqlSearchbox.Text = "";
                }
            }
        }
        private void ElementTextChanged(object sender, TextChangedEventArgs e)
        {
            if(sender == dataDictSearchBox)
            {
                CollectionViewSource.GetDefaultView(dataDictionaryListBox.ItemsSource).Refresh();
            }
            if(sender == doqlSearchbox)
            {
                CollectionViewSource.GetDefaultView(doqlListBox.ItemsSource).Refresh();
            }
        }
        private void ElementSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if(sender == dataDictionaryListBox)
            {
                if (dataDictionaryListBox.SelectedIndex >= 0)
                {
                    LoadDataDictGrid();
                }
            }
            if(sender == doqlListBox)
            {
                if (doqlListBox.SelectedIndex >= 0)
                {
                    string value = d42_Helper.DOQL_QUERIES.FirstOrDefault(x => x.Key == doqlListBox.SelectedItem.ToString()).Value;
                    doqlTextBox.Text = value;
                    if (doqlTab.SelectedIndex == 1)
                        doqlTab.SelectedIndex = 0;
                }
            }
        }
        private async void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            //Exit
            if (sender == exitMenuItem)
            {
                this.Close();
            }
            //Save DOQL
            if (sender == saveDOQLQueryMenuItem)
            {
                SaveDOQL();
            }
            //Config
            if (sender == configMenuItem)
            {
                if (!IsWindowOpen<ConfigWindow>())
                {
                    configWindow = new ConfigWindow(d42_Helper);
                    configWindow.Show();
                }
                else
                {
                    configWindow.Focus();
                }
            }
            //Save CSV
            if (sender == exportDoqlResultsAsCSVMenuItem)
            {
                d42_Helper.SaveDoqlResultsAsCSV(doqlListBox.SelectedItem.ToString());
                statusLabel.Text = d42_Helper.Status;
            }
            //Run Query
            if (sender == runDoqlQueryMenuItem)
            {
                await PostDoqlQUery();
                statusLabel.Text = d42_Helper.Status;
            }
            //Post new Saved Doql Query
            if (sender == createDoqlQueryMenuItem)
            {
                statusLabel.Text = $"{DateTime.Now.ToLongTimeString()} : Sending HTTP POST request to: {d42_Helper.Url}...";
                await d42_Helper.PostDoqlQUery(doqlTextBox.Text, doqlListBox.SelectedItem.ToString());
                statusLabel.Text = d42_Helper.Status;
            }

            //Update DOQL library
            if (sender == updateDOQLLibraryMenuItem)
            {
                await d42_Helper.UpdateDoql();
                statusLabel.Text = d42_Helper.Status;
                UpdateDoqlListBox();
            }
        }
        private async void DoqlListBox_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            await PostDoqlQUery();
        }
        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGrid dataGrid = (DataGrid)sender;
            dataGrid.Columns[dataGrid.Columns.Count - 1].Width = new DataGridLength(1, DataGridLengthUnitType.Star);
        }
        //</Event Handlers>
        private void LoadDataDictGrid()
        {
            try
            {
                List<Column> columns = new List<Column>();
                d42_Helper.DataDictionary.TryGetValue(dataDictionaryListBox.SelectedItem.ToString(), out columns);

                DataTable dt = new DataTable();
                dt.Columns.Add("Column Name", typeof(string));
                dt.Columns.Add("Data Type", typeof(string));
                dt.Columns.Add("Description", typeof(string));

                foreach (Column clm in columns)
                {
                    dt.Rows.Add(clm.all);
                }

                dataDictGrid.ItemsSource = dt.DefaultView;
                dataDictCollectionView = CollectionViewSource.GetDefaultView(dataDictionaryListBox.ItemsSource) as CollectionView;
                dataDictCollectionView.Filter = dataDictViewFilter;
            }

            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        private bool doqlViewFilter(object obj)
        {
            if (string.IsNullOrEmpty(doqlSearchbox.Text) || doqlSearchbox.Text == "Search")
            {
                return true;
            }
            else
            {
                return (obj.ToString().IndexOf(doqlSearchbox.Text, StringComparison.OrdinalIgnoreCase) >= 0);
            }
        }
        private bool dataDictViewFilter(object obj)
        {
            if (string.IsNullOrEmpty(dataDictSearchBox.Text) || dataDictSearchBox.Text == "Search")
            {
                return true;
            }
            else
            {
                return (obj.ToString().IndexOf(dataDictSearchBox.Text, StringComparison.OrdinalIgnoreCase) >= 0);
            }
        }
        public static bool IsWindowOpen<T>(string name = "") where T : Window
        {
            return string.IsNullOrEmpty(name)
               ? System.Windows.Application.Current.Windows.OfType<T>().Any()
               : System.Windows.Application.Current.Windows.OfType<T>().Any(w => w.Name.Equals(name));
        }
        private void LoadCSVOnDataGridView()
        {
            try
            {
                doqlResultsDataGrid.ItemsSource = d42_Helper.DoqlDataTable.DefaultView;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
        private async Task PostDoqlQUery()
        {
            statusLabel.Text = $"{DateTime.Now.ToLongTimeString()} : Sending HTTP POST request to: {d42_Helper.Url}...";
            await d42_Helper.QueryD42(doqlTextBox.Text);
            LoadCSVOnDataGridView();
            if (doqlTab.SelectedIndex == 0)
                doqlTab.SelectedIndex = 1;
            statusLabel.Text = d42_Helper.Status;
        }
        private void SaveDOQL()
        {
            string queryName= Interaction.InputBox("Doql Query File Name", "Enter a name", doqlListBox.SelectedItem.ToString());
            d42_Helper.SaveDoqlQuery(doqlTextBox.Text, queryName);
            UpdateDoqlListBox();
        }
        private void UpdateDoqlListBox()
        {
            doqlListBox.ItemsSource = (from kvp in d42_Helper.DOQL_QUERIES select kvp.Key).Distinct().ToList();
            doqlListBox.SelectedIndex = 0;
            doqlCollectionView = CollectionViewSource.GetDefaultView(doqlListBox.ItemsSource) as CollectionView;
            doqlCollectionView.Filter = doqlViewFilter;
        }
    }
}
